train_outremoved <- train_fillna
for(i in seq_along(num_features)){
feature <- num_features[i]
Q1 <- quantile(train_outremoved[, feature], 0.25)
Q3 <- quantile(train_outremoved[, feature], 0.75)
IQR <- Q3 - Q1
low_in <- Q1 - (1.5 * IQR)
low_out <- Q1 - (3 * IQR)
up_in <- Q3 + (1.5 * IQR)
up_out <- Q3 + (3 * IQR)
train_outremoved <- train_outremoved[train_outremoved[, feature] < up_out,]
train_outremoved <- train_outremoved[train_outremoved[, feature] > low_out,]
train_outremoved[, feature] <- clip(train_outremoved[, feature],
.min = low_in, .max = up_in)
}
num_features[i]
Q1 <- quantile(train_outremoved[, feature], 0.25)
Q3 <- quantile(train_outremoved[, feature], 0.75)
train_outremoved <- train_fillna
for(i in seq_along(num_features)){
feature <- num_features[i]
Q1 <- quantile(train_outremoved[, feature], 0.25)
Q3 <- quantile(train_outremoved[, feature], 0.75)
IQR <- Q3 - Q1
low_in <- Q1 - (1.5 * IQR)
low_out <- Q1 - (3 * IQR)
up_in <- Q3 + (1.5 * IQR)
up_out <- Q3 + (3 * IQR)
train_outremoved <- train_outremoved[train_outremoved[, feature] < up_out,]
train_outremoved <- train_outremoved[train_outremoved[, feature] > low_out,]
train_outremoved[, feature] <- clip(train_outremoved[, feature],
.min = low_in, .max = up_in)
}
train_outremoved <- train_fillna
feature <- num_features[i]
Q1 <- quantile(train_outremoved[, feature], 0.25)
Q3 <- quantile(train_outremoved[, feature], 0.75)
IQR <- Q3 - Q1
low_in <- Q1 - (1.5 * IQR)
low_out <- Q1 - (3 * IQR)
up_in <- Q3 + (1.5 * IQR)
up_out <- Q3 + (3 * IQR)
train_outremoved <- train_outremoved[train_outremoved[, feature] < up_out,]
train_outremoved <- train_outremoved[train_outremoved[, feature] > low_out,]
train_outremoved[, feature] <- clip(train_outremoved[, feature],
.min = low_in, .max = up_in)
train_outremoved <- train_fillna
for(1 in seq_along(num_features)){
train_outremoved <- train_fillna
for(i in 1){
feature <- num_features[i]
Q1 <- quantile(train_outremoved[, feature], 0.25)
Q3 <- quantile(train_outremoved[, feature], 0.75)
IQR <- Q3 - Q1
low_in <- Q1 - (1.5 * IQR)
low_out <- Q1 - (3 * IQR)
up_in <- Q3 + (1.5 * IQR)
up_out <- Q3 + (3 * IQR)
train_outremoved <- train_outremoved[train_outremoved[, feature] < up_out,]
train_outremoved <- train_outremoved[train_outremoved[, feature] > low_out,]
train_outremoved[, feature] <- clip(train_outremoved[, feature],
.min = low_in, .max = up_in)
}
train_outremoved <- train_fillna
for(i in 2){
feature <- num_features[i]
Q1 <- quantile(train_outremoved[, feature], 0.25)
Q3 <- quantile(train_outremoved[, feature], 0.75)
IQR <- Q3 - Q1
low_in <- Q1 - (1.5 * IQR)
low_out <- Q1 - (3 * IQR)
up_in <- Q3 + (1.5 * IQR)
up_out <- Q3 + (3 * IQR)
train_outremoved <- train_outremoved[train_outremoved[, feature] < up_out,]
train_outremoved <- train_outremoved[train_outremoved[, feature] > low_out,]
train_outremoved[, feature] <- clip(train_outremoved[, feature],
.min = low_in, .max = up_in)
}
for(i in seq_along(c(1))){
feature <- num_features[i]
Q1 <- quantile(train_outremoved[, feature], 0.25)
Q3 <- quantile(train_outremoved[, feature], 0.75)
IQR <- Q3 - Q1
low_in <- Q1 - (1.5 * IQR)
low_out <- Q1 - (3 * IQR)
up_in <- Q3 + (1.5 * IQR)
up_out <- Q3 + (3 * IQR)
train_outremoved <- train_outremoved[train_outremoved[, feature] < up_out,]
train_outremoved <- train_outremoved[train_outremoved[, feature] > low_out,]
train_outremoved[, feature] <- clip(train_outremoved[, feature],
.min = low_in, .max = up_in)
}
train_outremoved <- train_fillna
for(i in seq_along(c(1))){
feature <- num_features[i]
Q1 <- quantile(train_outremoved[, feature], 0.25)
Q3 <- quantile(train_outremoved[, feature], 0.75)
IQR <- Q3 - Q1
low_in <- Q1 - (1.5 * IQR)
low_out <- Q1 - (3 * IQR)
up_in <- Q3 + (1.5 * IQR)
up_out <- Q3 + (3 * IQR)
train_outremoved <- train_outremoved[train_outremoved[, feature] < up_out,]
train_outremoved <- train_outremoved[train_outremoved[, feature] > low_out,]
train_outremoved[, feature] <- clip(train_outremoved[, feature],
.min = low_in, .max = up_in)
}
train_outremoved <- train_fillna
for(i in seq_along(c(1, 2))){
feature <- num_features[i]
Q1 <- quantile(train_outremoved[, feature], 0.25)
Q3 <- quantile(train_outremoved[, feature], 0.75)
IQR <- Q3 - Q1
low_in <- Q1 - (1.5 * IQR)
low_out <- Q1 - (3 * IQR)
up_in <- Q3 + (1.5 * IQR)
up_out <- Q3 + (3 * IQR)
train_outremoved <- train_outremoved[train_outremoved[, feature] < up_out,]
train_outremoved <- train_outremoved[train_outremoved[, feature] > low_out,]
train_outremoved[, feature] <- clip(train_outremoved[, feature],
.min = low_in, .max = up_in)
}
train_outremoved <- train_fillna
for(i in seq_along(c(1, 2, 3))){
feature <- num_features[i]
Q1 <- quantile(train_outremoved[, feature], 0.25)
Q3 <- quantile(train_outremoved[, feature], 0.75)
IQR <- Q3 - Q1
low_in <- Q1 - (1.5 * IQR)
low_out <- Q1 - (3 * IQR)
up_in <- Q3 + (1.5 * IQR)
up_out <- Q3 + (3 * IQR)
train_outremoved <- train_outremoved[train_outremoved[, feature] < up_out,]
train_outremoved <- train_outremoved[train_outremoved[, feature] > low_out,]
train_outremoved[, feature] <- clip(train_outremoved[, feature],
.min = low_in, .max = up_in)
}
train_outremoved <- train_fillna
for(i in seq_along(c(1, 2, 3, 4))){
feature <- num_features[i]
Q1 <- quantile(train_outremoved[, feature], 0.25)
Q3 <- quantile(train_outremoved[, feature], 0.75)
IQR <- Q3 - Q1
low_in <- Q1 - (1.5 * IQR)
low_out <- Q1 - (3 * IQR)
up_in <- Q3 + (1.5 * IQR)
up_out <- Q3 + (3 * IQR)
train_outremoved <- train_outremoved[train_outremoved[, feature] < up_out,]
train_outremoved <- train_outremoved[train_outremoved[, feature] > low_out,]
train_outremoved[, feature] <- clip(train_outremoved[, feature],
.min = low_in, .max = up_in)
}
train_outremoved <- train_fillna
for(i in seq_along(c(1, 2, 3, 4, 5))){
feature <- num_features[i]
Q1 <- quantile(train_outremoved[, feature], 0.25)
Q3 <- quantile(train_outremoved[, feature], 0.75)
IQR <- Q3 - Q1
low_in <- Q1 - (1.5 * IQR)
low_out <- Q1 - (3 * IQR)
up_in <- Q3 + (1.5 * IQR)
up_out <- Q3 + (3 * IQR)
train_outremoved <- train_outremoved[train_outremoved[, feature] < up_out,]
train_outremoved <- train_outremoved[train_outremoved[, feature] > low_out,]
train_outremoved[, feature] <- clip(train_outremoved[, feature],
.min = low_in, .max = up_in)
}
View(train_fillna)
train_outremoved <- train_fillna
feature <- num_features[5]
Q1 <- quantile(train_outremoved[, feature], 0.25)
Q3 <- quantile(train_outremoved[, feature], 0.75)
IQR <- Q3 - Q1
low_in <- Q1 - (1.5 * IQR)
low_out <- Q1 - (3 * IQR)
up_in <- Q3 + (1.5 * IQR)
up_out <- Q3 + (3 * IQR)
train_outremoved <- train_outremoved[train_outremoved[, feature] < up_out,]
train_outremoved <- train_outremoved[train_outremoved[, feature] > low_out,]
train_outremoved[, feature] <- clip(train_outremoved[, feature],
.min = low_in, .max = up_in)
train_outremoved <- train_fillna
for(i in seq_along(c(1, 2, 3, 4, 5))){
feature <- num_features[5]
Q1 <- quantile(train_outremoved[, feature], 0.25)
Q3 <- quantile(train_outremoved[, feature], 0.75)
IQR <- Q3 - Q1
low_in <- Q1 - (1.5 * IQR)
low_out <- Q1 - (3 * IQR)
up_in <- Q3 + (1.5 * IQR)
up_out <- Q3 + (3 * IQR)
train_outremoved <- train_outremoved[train_outremoved[, feature] < up_out,]
train_outremoved <- train_outremoved[train_outremoved[, feature] > low_out,]
train_outremoved[, feature] <- clip(train_outremoved[, feature],
.min = low_in, .max = up_in)
}
train_outremoved <- train_fillna
for(i in seq_along(c(1, 2, 3, 4, 5, 6))){
feature <- num_features[5]
Q1 <- quantile(train_outremoved[, feature], 0.25)
Q3 <- quantile(train_outremoved[, feature], 0.75)
IQR <- Q3 - Q1
low_in <- Q1 - (1.5 * IQR)
low_out <- Q1 - (3 * IQR)
up_in <- Q3 + (1.5 * IQR)
up_out <- Q3 + (3 * IQR)
train_outremoved <- train_outremoved[train_outremoved[, feature] < up_out,]
train_outremoved <- train_outremoved[train_outremoved[, feature] > low_out,]
train_outremoved[, feature] <- clip(train_outremoved[, feature],
.min = low_in, .max = up_in)
}
train_outremoved <- train_fillna
for(i in seq_along(c(1, 2, 3, 4, 5, 6))){
feature <- num_features[i]
Q1 <- quantile(train_outremoved[, feature], 0.25)
Q3 <- quantile(train_outremoved[, feature], 0.75)
IQR <- Q3 - Q1
low_in <- Q1 - (1.5 * IQR)
low_out <- Q1 - (3 * IQR)
up_in <- Q3 + (1.5 * IQR)
up_out <- Q3 + (3 * IQR)
train_outremoved <- train_outremoved[train_outremoved[, feature] < up_out,]
train_outremoved <- train_outremoved[train_outremoved[, feature] > low_out,]
train_outremoved[, feature] <- clip(train_outremoved[, feature],
.min = low_in, .max = up_in)
}
train_outremoved <- train_fillna
for(i in seq_along(c(1, 2, 3, 4, 5))){
feature <- num_features[i]
Q1 <- quantile(train_outremoved[, feature], 0.25)
Q3 <- quantile(train_outremoved[, feature], 0.75)
IQR <- Q3 - Q1
low_in <- Q1 - (1.5 * IQR)
low_out <- Q1 - (3 * IQR)
up_in <- Q3 + (1.5 * IQR)
up_out <- Q3 + (3 * IQR)
train_outremoved <- train_outremoved[train_outremoved[, feature] < up_out,]
train_outremoved <- train_outremoved[train_outremoved[, feature] > low_out,]
train_outremoved[, feature] <- clip(train_outremoved[, feature],
.min = low_in, .max = up_in)
}
train_outremoved <- train_fillna
for(i in seq_along(c(1, 2, 3, 4, 6))){
feature <- num_features[i]
Q1 <- quantile(train_outremoved[, feature], 0.25)
Q3 <- quantile(train_outremoved[, feature], 0.75)
IQR <- Q3 - Q1
low_in <- Q1 - (1.5 * IQR)
low_out <- Q1 - (3 * IQR)
up_in <- Q3 + (1.5 * IQR)
up_out <- Q3 + (3 * IQR)
train_outremoved <- train_outremoved[train_outremoved[, feature] < up_out,]
train_outremoved <- train_outremoved[train_outremoved[, feature] > low_out,]
train_outremoved[, feature] <- clip(train_outremoved[, feature],
.min = low_in, .max = up_in)
}
train_outremoved <- train_fillna
for(i in seq_along(c(1, 2, 3, 4, 7]))){
train_outremoved <- train_fillna
for(i in seq_along(c(1, 2, 3, 4, 6))){
feature <- num_features[i]
Q1 <- quantile(train_outremoved[, feature], 0.25)
Q3 <- quantile(train_outremoved[, feature], 0.75)
IQR <- Q3 - Q1
low_in <- Q1 - (1.5 * IQR)
low_out <- Q1 - (3 * IQR)
up_in <- Q3 + (1.5 * IQR)
up_out <- Q3 + (3 * IQR)
train_outremoved <- train_outremoved[train_outremoved[, feature] < up_out,]
train_outremoved <- train_outremoved[train_outremoved[, feature] > low_out,]
train_outremoved[, feature] <- clip(train_outremoved[, feature],
.min = low_in, .max = up_in)
}
train_outremoved <- train_fillna
for(i in seq_along(c(1, 2, 3, 4, 7))){
feature <- num_features[i]
Q1 <- quantile(train_outremoved[, feature], 0.25)
Q3 <- quantile(train_outremoved[, feature], 0.75)
IQR <- Q3 - Q1
low_in <- Q1 - (1.5 * IQR)
low_out <- Q1 - (3 * IQR)
up_in <- Q3 + (1.5 * IQR)
up_out <- Q3 + (3 * IQR)
train_outremoved <- train_outremoved[train_outremoved[, feature] < up_out,]
train_outremoved <- train_outremoved[train_outremoved[, feature] > low_out,]
train_outremoved[, feature] <- clip(train_outremoved[, feature],
.min = low_in, .max = up_in)
}
train_outremoved <- train_fillna
for(i in seq_along(c(1, 2, 3, 4))){
feature <- num_features[i]
Q1 <- quantile(train_outremoved[, feature], 0.25)
Q3 <- quantile(train_outremoved[, feature], 0.75)
IQR <- Q3 - Q1
low_in <- Q1 - (1.5 * IQR)
low_out <- Q1 - (3 * IQR)
up_in <- Q3 + (1.5 * IQR)
up_out <- Q3 + (3 * IQR)
train_outremoved <- train_outremoved[train_outremoved[, feature] < up_out,]
train_outremoved <- train_outremoved[train_outremoved[, feature] > low_out,]
train_outremoved[, feature] <- clip(train_outremoved[, feature],
.min = low_in, .max = up_in)
}
library(skimr)
library(ramify)
library(tidymodels)
train <- read.csv("people_analytics/train.csv")
skim(train)
head(train, 5)
train$gender
train %>% mutate(gender, as.character)
train %>% mutate(gender, as_character)
train %>% mutate_at(gender, as.character)
as.character(train$gender)
train$gender <- as.character(train$gender)
features <- train %>% select(-Best.Performance) %>% colnames()
cat_features <- train %>% select_if(is.character) %>% colnames()
num_features <- setdiff(features, cat_features)
test <- read.csv("people_analytics/test.csv")
skim(test)
head(test, 5)
test$gender <- as.character(test$gender)
for(i in seq_along(num_features)){
feature <- num_features[i]
miss_count <- sum(is.na(train[feature]))
miss_percentage <- (miss_count / nrow(train)) * 100
print(sprintf("%s: %f, %f%%", feature, miss_count, miss_percentage))
}
train_fillna <- train
for(i in seq_along(num_features)){
feature <- num_features[i]
median <- median(train_fillna[, feature], na.rm = TRUE)
train_fillna[, feature] <- replace(train_fillna[, feature],
is.na(train_fillna[, feature]), median)
}
for(i in seq_along(num_features)){
feature <- num_features[i]
boxplot(train_fillna[, feature], xlab = feature, horizontal = TRUE)
}
train_outremoved <- train_fillna
for(i in seq_along(c(1, 2, 3, 4))){
feature <- num_features[i]
Q1 <- quantile(train_outremoved[, feature], 0.25)
Q3 <- quantile(train_outremoved[, feature], 0.75)
IQR <- Q3 - Q1
low_in <- Q1 - (1.5 * IQR)
low_out <- Q1 - (3 * IQR)
up_in <- Q3 + (1.5 * IQR)
up_out <- Q3 + (3 * IQR)
train_outremoved <- train_outremoved[train_outremoved[, feature] < up_out,]
train_outremoved <- train_outremoved[train_outremoved[, feature] > low_out,]
train_outremoved[, feature] <- clip(train_outremoved[, feature],
.min = low_in, .max = up_in)
}
summary(train_outremoved)
X_train_outremoved <-
train_outremoved[, features]
X_/train_outremoved <-
train_outremoved[, features]
train_outremoved[, features]
X_train_outremoved <- train_outremoved[, features]
y_train_outremoved <- train_outremoved$Best.Performance
chisq_score <- NULL
for(i in seq_along(features)){
feature <- features[i]
chisq <- tidy(chisq.test(X_train_outremoved[feature], y_train))
chisq_statistic <- chisq$statistic
chisq_pvalue <- chisq$p.value
chisq_score <- rbind(chisq_score, c(feature, chisq_statistic, chisq_pvalue))
}
chisq_score <- NULL
for(i in seq_along(features)){
feature <- features[i]
chisq <- tidy(chisq.test(X_train_outremoved[feature], y_train_outremoved))
chisq_statistic <- chisq$statistic
chisq_pvalue <- chisq$p.value
chisq_score <- rbind(chisq_score, c(feature, chisq_statistic, chisq_pvalue))
}
chisq_score <- as.data.frame(chisq_score) %>%
rename(Feature = V1, ChiSquare_Score = `X-squared`, P_Value = V3) %>%
mutate_at(vars(ChiSquare_Score, P_Value), as.numeric) %>%
arrange(desc(ChiSquare_Score))
ggplot(chisq_score, aes(x = ChiSquare_Score, y = reorder(Feature, ChiSquare_Score),
fill = reorder(Feature, desc(ChiSquare_Score)))) +
geom_col() +
ggtitle("ChiSquare score rank") +
xlab("ChiSquare score") +
ylab("Features") +
theme(legend.position = "none")
correlation <- as.data.frame(cor(X_train_outremoved, use = "complete.obs")) %>%
rownames_to_column(var = "col1") %>%
pivot_longer(-col1, "col2")
correlation <- as.data.frame(cor(X_train_outremoved[num_features], use = "complete.obs")) %>%
rownames_to_column(var = "col1") %>%
pivot_longer(-col1, "col2")
ggplot(correlation, aes(x = col1, y = col2, fill = value, label = signif(value, 2))) +
geom_tile() +
geom_text(size = 4) +
scale_fill_gradient2(mid = "#FBFEF9", low = "#0C6291", high = "#A63446",
limits = c(-1, 1)) +
xlim(num_features) +
ylim(rev(num_features)) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, size = 10),
axis.text.y = element_text(size = 10),
legend.title = element_blank()
)
ggplot(correlation, aes(x = col1, y = col2, fill = value, label = signif(value, 2))) +
geom_tile() +
geom_text(size = 4) +
scale_fill_gradient2(mid = "#FBFEF9", low = "#0C6291", high = "#A63446",
limits = c(-1, 1)) +
xlim(num_features) +
ylim(rev(num_features)) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, size = 10),
axis.text.y = element_text(size = 10),
legend.title = element_blank()
)
ggplot(correlation, aes(x = col1, y = col2, fill = value, label = signif(value, 2))) +
geom_tile() +
geom_text(size = 4) +
scale_fill_gradient2(mid = "#FBFEF9", low = "#0C6291", high = "#A63446",
limits = c(-1, 1)) +
xlim(num_features) +
ylim(rev(num_features)) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, size = 10),
axis.text.y = element_text(size = 10),
legend.title = element_blank()
)
ggplot(correlation, aes(x = col1, y = col2, fill = value, label = signif(value, 2))) +
geom_tile() +
geom_text(size = 4) +
scale_fill_gradient2(mid = "#FBFEF9", low = "#0C6291", high = "#A63446",
limits = c(-1, 1)) +
xlim(num_features) +
ylim(rev(num_features)) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, size = 10),
axis.text.y = element_text(size = 10),
legend.title = element_blank()
)
ggplot(correlation, aes(x = col1, y = col2, fill = value, label = signif(value, 2))) +
geom_tile() +
geom_text(size = 4) +
scale_fill_gradient2(mid = "#FBFEF9", low = "#0C6291", high = "#A63446",
limits = c(-1, 1)) +
xlim(num_features) +
ylim(rev(num_features)) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, size = 10),
axis.text.y = element_text(size = 10),
legend.title = element_blank()
)
features <- X_train_outremoved %>% colnames()
features <- X_train_outremoved %>% colnames()
remove_features <- c("job_duration_in_current_person_level", "age", "job_duration_from_training",
"Achievement_above_100._during3quartal")
features <- setdiff(features, removed_features)
features <- X_train_outremoved %>% colnames()
removed_features <- c("job_duration_in_current_person_level", "age", "job_duration_from_training",
"Achievement_above_100._during3quartal")
features <- setdiff(features, removed_features)
X_train_outremoved[, features]
X_train_fin <- X_train_outremoved[, features]
X_test_fin <- test[, features]
head(X_train_fin, 5)
head(X_test_fin, 5)
test_fin <- test[, features]
head(X_train_fin, 5)
head(test_fin, 5)
saveRDS(cbind(X_train_fin, y_train_outremoved), "train_fin.rds")
saveRDS(test_fin, "test_fin.rds")
library(themis)
library(tidymodels)
train <- readRDS("train_fin.rds") %>%
mutate(Best.Performance = as.factor(Best.Performance))
readRDS("train_fin.rds")
train <- readRDS("train_fin.rds") %>%
mutate(Best.Performance = as.factor(y_train_outremoved))
test <- readRDS("test_fin.rds")
View(train)
train <- readRDS("train_fin.rds") %>%
mutate(y_train_outremoved = as.factor(y_train_outremoved))
test <- readRDS("test_fin.rds")
set.seed(123)
split <- initial_split(train, prop = 7/10, strata = y_train_outremoved)
train_train <- analysis(split)
train_valid <- assessment(split)
set.seed(123)
train_train_rsmp <- recipe(y_train_outremoved ~ ., data = train_train) %>%
step_tomek(TARGET, seed = 123) %>%
step_smote(TARGET, seed = 123) %>%
prep() %>%
juice()
set.seed(123)
train_train_rsmp <- recipe(y_train_outremoved ~ ., data = train_train) %>%
step_tomek(y_train_outremoved, seed = 123) %>%
step_smote(y_train_outremoved, seed = 123) %>%
prep() %>%
juice()
